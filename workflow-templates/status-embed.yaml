name: Status Embed

on:
  workflow_run:
    workflows:
      # ---------------------------- IMPORTANT ----------------------------
      # Include ALL workflows in the lint->deploy sequence here, including
      # intermediate ALL intermediate workflows. Names should be equal to
      # the name set in the workflow. For example, this workflow is named
      # `Status Embed` (without the backticks).
    types:
      - completed

jobs:
  status_embed:
    # ---------------------------- IMPORTANT ----------------------------
    # - Replace NAME_OF_LAST_WORKFLOW with the name of the last workflow
    #   in the workflow sequence.
    # - Replace NAME_OF_LAST_OR_WORKFLOW with the last workflow that runs
    #   for a `pull_request` event. The PR section can be removed if this
    #   sequence does not trigger for that event.
    #
    # This compound condition makes sure we only send an embed when a
    # sequence of workflows ends. A sequence always ends when a workflow
    # is not successful (i.e., failure or cancelled) or after the last
    # workflow in lint->deploy or PR sequence.
    if: >-
      github.event.workflow_run.conclusion != 'skipped' && (
        github.event.workflow_run.name == NAME_OF_LAST_WORKFLOW  ||
        (
          github.event.workflow_run.name == NAME_OF_LAST_PR_WORKFLOW &&
          github.event.workflow_run.event == 'pull_request'
        ) ||
        github.event.workflow_run.conclusion == 'failure' ||
        github.event.workflow_run.conclusion == 'cancelled'
      )
    name:  Send a Status Embed to Discord
    runs-on: ubuntu-latest

    steps:
      # ---------------------------- IMPORTANT ----------------------------
      # This part processes the artifact with the pull request webhook
      # payload uploaded by the `pull_request`-triggered workflow. This
      # means that the PR workflow has to upload that artifact if you
      # want a PR-specific status embed.
      #
      # These are the steps that should be included at the end of the PR
      # workflow in order for this to happen:
      #
      # - name: Prepare Pull Request Payload artifact
      #  id: prepare-artifact
      #  if: always() && github.event_name == 'pull_request'
      #  continue-on-error: true
      #  run: cat $GITHUB_EVENT_PATH | jq '.pull_request' > pull_request_payload.json
      #
      # - name: Upload a Build Artifact
      #  if: always() && steps.prepare-artifact.outcome == 'success'
      #  continue-on-error: true
      #  uses: actions/upload-artifact@v2
      #  with:
      #    name: pull-request-payload
      #    path: pull_request_payload.json

      - name: Get Pull Request Information
        id: pr_info
        if: github.event.workflow_run.event == 'pull_request'
        run: |
          curl -s -H "Authorization: token $GITHUB_TOKEN" ${{ github.event.workflow_run.artifacts_url }} > artifacts.json
          DOWNLOAD_URL=$(cat artifacts.json | jq -r '.artifacts[] | select(.name == "pull-request-payload") | .archive_download_url')
          [ -z "$DOWNLOAD_URL" ] && exit 1
          wget --quiet --header="Authorization: token $GITHUB_TOKEN" -O pull_request_payload.zip $DOWNLOAD_URL || exit 2
          unzip -p pull_request_payload.zip > pull_request_payload.json
          [ -s pull_request_payload.json ] || exit 3
          echo "::set-output name=pr_author_login::$(jq -r '.user.login // empty' pull_request_payload.json)"
          echo "::set-output name=pr_number::$(jq -r '.number // empty' pull_request_payload.json)"
          echo "::set-output name=pr_title::$(jq -r '.title // empty' pull_request_payload.json)"
          echo "::set-output name=pr_source::$(jq -r '.head.label // empty' pull_request_payload.json)"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Send an informational status embed to Discord instead of the
      # standard embeds that Discord sends. This embed will contain
      # more information and we can fine tune when we actually want
      # to send an embed.
      - name: GitHub Actions Status Embed for Discord
        uses: SebastiaanZ/github-status-embed-for-discord@v0.3.0
        with:
          # Our GitHub Actions webhook
          webhook_id: '784184528997842985'
          webhook_token: ${{ secrets.GHA_WEBHOOK_TOKEN }}

          # Workflow information
          workflow_name: ${{ github.event.workflow_run.name }}
          run_id: ${{ github.event.workflow_run.id }}
          run_number: ${{ github.event.workflow_run.run_number }}
          status: ${{ github.event.workflow_run.conclusion }}
          sha: ${{ github.event.workflow_run.head_sha }}

          # Now we can use the information extracted in the previous step:
          pr_author_login: ${{ steps.pr_info.outputs.pr_author_login }}
          pr_number: ${{ steps.pr_info.outputs.pr_number }}
          pr_title: ${{ steps.pr_info.outputs.pr_title }}
          pr_source: ${{ steps.pr_info.outputs.pr_source }}
